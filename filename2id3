#!/usr/bin/perl
# vim: ft=perl:fdm=marker:fmr=#<,#>:fen:et:sw=2:
# abstract: grab artist and title from filename and tag it for import in beets
#
# only understands a naming scheme like
#   artist - title.mp3
# for now
use strict;
use warnings FATAL => 'all';
use vars     qw($VERSION);
use autodie  qw(:all);

use utf8;
use open qw(:std :utf8);

my $APP  = 'filename2id3';
$VERSION = '0.001';

use Data::Dumper;

{
  package Data::Dumper;
  no strict 'vars';
  $Terse = $Indent = $Useqq = $Deparse = $Sortkeys = 1;
  $Quotekeys = 0;
}

use MP3::Info;
use File::LsColor qw(ls_color);
use Term::ExtendedColor qw(fg bg);

die "No files specified!\n" unless grep { -f $_ } @ARGV;
my @files = grep { m/[.]mp3$/i } @ARGV;


for my $file(@files) {
  my $tag = get_mp3tag($file);

  if(defined $tag and $tag->{ARTIST} ne '' and $tag->{TITLE} ne '') {
    printf "%s\n", bg(160, 'TAG EXISTS: ');
    printf "%s\n existing artist: %s\n  existing title: %s\n",
      ls_color($file), bg(124, $tag->{ARTIST}), bg(124, $tag->{TITLE});

    my ($new_artist, $new_title) = filename2id3($file);
    printf "%s\n", fg(244, '-' x 31);
    printf "      new artist: %s\n       new title: %s\n",
      bg(64, $new_artist), bg(64, $new_title);
    printf "retag from filename? [Y/n] ";

    my $answer = 'y'; # default

    chomp($answer = <STDIN>);
    set_mp3tag($file,
      {
        ARTIST => $new_artist,
        TITLE  => $new_title,
      }
    ) if lc($answer) eq 'y';
  }
  else {
    filename2id3($file);
  }
}

sub filename2id3 {
  my $f = shift;
  my($artist, $title) = $f  =~ m/(?:[0-9]+[.]?)?\s*(.+)\s+-\s+(.+)[.]mp3/;

  # grab first, "primary" artist
  # https://www.japh.se/2021/06/01/capture-primary-artist-as-a-separate-field-in-beets.html
  $artist =~ s/(.+)\s*(?:,|feat|featuring|ft|vs)[.]?.*/$1/;
  $artist =~ s/\s+$//;

  return($artist, $title);
}
